import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';

function App() {
  const [provider, setProvider] = useState(null);
  const [connectedAddress, setConnectedAddress] = useState('');
  const [blockNumber, setBlockNumber] = useState(0);
  const [blockHash, setBlockHash] = useState('');
  const [blockData, setBlockData] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    async function loadProvider() {
      if (window.ethereum) {
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        try {
          await window.ethereum.enable();
          setProvider(provider);
          const signer = provider.getSigner();
          const address = await signer.getAddress();
          setConnectedAddress(address);
        } catch (error) {
          console.error(error);
        }
      } else {
        // MetaMask is not connected, fetch data from the backend
        try {
          const response = await fetch('http://localhost:3000/api/block/123'); // Replace with the actual endpoint
          const data = await response.json();
          setBlockData(data);
        } catch (error) {
          console.error(error);
          setError('Failed to fetch data from the backend');
        }
      }
    }
    loadProvider();
  }, []);

  const handleBlockNumberChange = (event) => {
    setBlockNumber(event.target.value);
  };

  const handleBlockHashChange = (event) => {
    setBlockHash(event.target.value);
  };

  const handleBlockNumberSubmit = async (event) => {
    event.preventDefault();
    const blockNumber = parseInt(event.target.elements.blockNumber.value);
    const block = await provider.getBlock(blockNumber);
    setBlockData(block);
  };

  const handleBlockHashSubmit = async (event) => {
    event.preventDefault();
    const blockHash = event.target.elements.blockHash.value;
    const block = await provider.getBlock(blockHash);
    setBlockData(block);
  };

  const handleTransactionSubmit = async (event) => {
    event.preventDefault();
    const txHash = event.target.elements.transactionHash.value;
    const tx = await provider.getTransaction(txHash);
    console.log(tx);
  };

  return (
    <div>
      <h1>Ethereum Data Fetcher</h1>
      {error ? (
        <p>{error}</p>
      ) : (
        <div>
          {provider ? (
            <div>
              <p>Connected Address: {connectedAddress}</p>
              <form onSubmit={handleBlockNumberSubmit}>
                <label htmlFor="blockNumber">Block Number:</label>
                <input
                  type
                  ="number"
                  id="blockNumber"
                  name="blockNumber"
                  onChange={handleBlockNumberChange}
                  />
                  <button type="submit">Fetch Block</button>
                  </form>
                  <form onSubmit={handleBlockHashSubmit}>
                  <label htmlFor="blockHash">Block Hash:</label>
                  <input
                                 type="text"
                                 id="blockHash"
                                 name="blockHash"
                                 onChange={handleBlockHashChange}
                               />
                  <button type="submit">Fetch Block</button>
                  </form>
                  <form onSubmit={handleTransactionSubmit}>
                  <label htmlFor="transactionHash">Transaction Hash:</label>
                  <input type="text" id="transactionHash" name="transactionHash" />
                  <button type="submit">Fetch Transaction</button>
                  </form>
                  {blockData && (
                  <div>
                  <h2>Block Data:</h2>
                  <p>Number: {blockData.number}</p>
                  <p>Hash: {blockData.hash}</p>
                  <p>Timestamp: {new Date(blockData.timestamp * 1000).toLocaleString()}</p>
                  <p>Transactions: {blockData.transactions.length}</p>
                  </div>
                  )}
                  </div>
                  ) : (
                  <p>Please connect to MetaMask</p>
                  )}
                  </div>
                  )}
                  </div>
                  );
                  }
                  
                  export default App;
